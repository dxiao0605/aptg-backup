import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.smpp.Data;
import org.smpp.ServerPDUEvent;
import org.smpp.ServerPDUEventListener;
import org.smpp.Session;
import org.smpp.SmppObject;
import org.smpp.TCPIPConnection;
import org.smpp.pdu.Address;
import org.smpp.pdu.AddressRange;
import org.smpp.pdu.BindReceiver;
import org.smpp.pdu.BindRequest;
import org.smpp.pdu.BindResponse;
import org.smpp.pdu.BindTransciever;
import org.smpp.pdu.BindTransmitter;
import org.smpp.pdu.PDU;
import org.smpp.pdu.SubmitSM;
import org.smpp.pdu.SubmitSMResp;
import org.smpp.pdu.UnbindResp;
import org.smpp.pdu.WrongLengthOfStringException;
import org.smpp.util.ByteBuffer;
import org.smpp.util.Queue;

public class smsSend {

	private static final Logger logger = LogManager.getFormatterLogger(smsSend.class.getName());

	String DB_URL = "";
	String USER = "";
	String PASS = "";

	Connection conn = null;
	Statement stmt = null;
	Statement p_stmt = null;
	ResultSet rs, p_rs;

	Properties properties = new Properties();
	static Session session = null;
	static int queryTimesLog = 300;
	static int rebindSmscTime = 3000;
	static int stopProcess = 0;
	
	boolean bound = false;
	String ipAddress = null;
	int port = 0;
	String systemId = null;
	String password = null;
	String bindOption = "t";

	boolean asynchronous = false;
	SMPPTestPDUEventListener pduListener = null;

	AddressRange addressRange = new AddressRange();

	String systemType = "";
	String serviceType = "";
	Address sourceAddress = new Address();
	Address destAddress = new Address();
	String scheduleDeliveryTime = "";
	String validityPeriod = "";
	String shortMessage = "";
	int numberOfDestination = 1;
	String messageId = "";
	byte esmClass = 0;
	byte protocolId = 0;
	byte priorityFlag = 0;
	byte registeredDelivery = 0;
	byte replaceIfPresentFlag = 0;
	byte dataCoding = 0;
	byte smDefaultMsgId = 0;
	long receiveTimeout = Data.RECEIVE_BLOCKING;

	String callBackUrl = "";
	String callBackNumStr = "";
	ByteBuffer callBackNumber = new ByteBuffer();
	String chineseCharacter = "UnicodeBigUnmarked"; // big5

	// String A_NUM , B_NUM , MSG ,SMS_SEQ;
	String psSeq = "";
	String smSeq = "";

	int r_msgcount = 0;
	int t_msgcount = 0, t_finish = 0;

	public smsSend() throws IOException {
		//getConfig();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// SmppObject.setDebug(debug);
		// SmppObject.setEvent(event);
		logger.info("Initialising...");
		smsSend startap = null;
		int loop_count=0;
		
		try {
			startap = new smsSend();

			if (startap != null) {

				while (true)
				{
				
				 
				 
				 startap.getConfig();	
				 
				 if(stopProcess > 0) {
					 logger.info("Stop Process ");
					 break;
				 }
				startap.bind();

				// Thread.sleep(2000);
				startap.loop();

				// loop();
				// startap.submit();

		        startap.unbind();
				}

			}

		} catch (Exception e) {

			startap.unbind();
			logger.error("exception initialising SMPPTest " + e);

		}

	}

	private void loop() {

		try {

			logger.info("Connecting to database...");
			Class.forName("com.mysql.jdbc.Driver");

			conn = DriverManager.getConnection(DB_URL, USER, PASS);

			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			String sql = "select sms_seq,a_num,b_num,msg,status,msg_id from sms_send_msg where now() > target_time and status ='O'";

			// logger.info((sql);

			int loop_count=0;
			int total_count=0;
			
			while (true) {

				Thread.sleep(1000);
				loop_count++;
				total_count++;
				rs = stmt.executeQuery(sql);
				int rec_count = 0;
				t_finish = 0;
				
				if(loop_count > queryTimesLog) {
					logger.info("Runnging Query DB "+ queryTimesLog+ " times");
					loop_count =0;
				}
				
				
				if(total_count > rebindSmscTime) {
					
					stmt.close();
					rs.close();
					conn.close();
					
					logger.info("Close database...");
					
					break;
				}
					
				while (rs.next()) {

					// A_NUM ="";
					// B_NUM="";
					// MSG="";
					// SMS_SEQ="";

					messageId = "I";

					// Thread.sleep(2);
					rec_count++;

					String A_NUM = rs.getString("a_num");
					String B_NUM = rs.getString("b_num");
					String MSG = rs.getString("msg");
					String SMS_SEQ = rs.getString("sms_seq");

					logger.info("DB Recod Count =" + Integer.toString(rec_count));
					logger.info("SMS_SEQ=" + SMS_SEQ + ",A_NUM=" + A_NUM + ",B_NUM=" + B_NUM + ",MSG=" + MSG);

					submit(SMS_SEQ,A_NUM,B_NUM,MSG);

					Date f_Date = new Date();
					DateFormat f_DateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
					String f_time = f_DateFormat.format(f_Date);

					logger.info("f_time =" + f_time);
					rs.updateString("msg_id", messageId);
					rs.updateString("status", "C");
					// rs.updateString("finish_time", f_time);
					// rs.updateString("ret_msg", ret_msg.substring(0) );
					rs.updateRow();
					// logger.info("ret_msg = " +ret_msg );

					logger.info(
							"end line ---------------------------------------------------------------------------------------------------------------------------------------------");
				}

				
			}

		} catch (Exception e) {
			// conn.close();
			logger.error("Got an exception! " + e);
			logger.info(e.getMessage());
			e.printStackTrace();

		}

	}

	/**
	 * Gets a property and converts it into byte.
	 */
	private byte getByteProperty(String propName, byte defaultValue) {
		return Byte.parseByte(properties.getProperty(propName, Byte.toString(defaultValue)));
	}

	/**
	 * Gets a property and converts it into integer.
	 */
	private int getIntProperty(String propName, int defaultValue) {
		return Integer.parseInt(properties.getProperty(propName, Integer.toString(defaultValue)));
	}

	private void setAddressParameter(String descr, Address address, byte ton, byte npi, String addr) {
		address.setTon(ton);
		address.setNpi(npi);
		try {
			address.setAddress(addr);
		} catch (WrongLengthOfStringException e) {
			logger.error("The length of " + descr + " parameter is wrong.");
		}
	}

	private void getConfig() {

		String Config_f = "config.properties";

		byte ton;
		byte npi;
		String addr;

		String bindMode;
		int rcvTimeout;
		String syncMode;

		try {
			
			
			logger.info("Load Config ......");
			properties.load(new FileInputStream(Config_f));

			
			
			DB_URL = properties.getProperty("MySqlUrl");
			USER = properties.getProperty("username");
			PASS = properties.getProperty("password");
			
			queryTimesLog = Integer.parseInt(properties.getProperty("queryTimesLog"));
			rebindSmscTime = Integer.parseInt(properties.getProperty("rebindSmscTime"));
			stopProcess =Integer.parseInt(properties.getProperty("stopProcess"));

			ipAddress = properties.getProperty("ip-address");
			port = getIntProperty("port", port);
			systemId = properties.getProperty("system-id");
			password = properties.getProperty("smsc_password");

			ton = getByteProperty("addr-ton", addressRange.getTon());
			npi = getByteProperty("addr-npi", addressRange.getNpi());
			addr = properties.getProperty("address-range", addressRange.getAddressRange());

			addressRange.setTon(ton);
			addressRange.setNpi(npi);

			try {
				addressRange.setAddressRange(addr);
			} catch (WrongLengthOfStringException e) {
				logger.error("The length of address-range parameter is wrong.");
			}

			ton = getByteProperty("source-ton", sourceAddress.getTon());
			npi = getByteProperty("source-npi", sourceAddress.getNpi());
			addr = properties.getProperty("source-address", sourceAddress.getAddress());
			setAddressParameter("source-address", sourceAddress, ton, npi, addr);

			ton = getByteProperty("destination-ton", destAddress.getTon());
			npi = getByteProperty("destination-npi", destAddress.getNpi());
			addr = properties.getProperty("destination-address", destAddress.getAddress());
			setAddressParameter("destination-address", destAddress, ton, npi, addr);

			serviceType = properties.getProperty("service-type", serviceType);
			systemType = properties.getProperty("system-type", systemType);
			bindMode = properties.getProperty("bind-mode", bindOption);
			bindOption = bindMode;

			if (receiveTimeout == Data.RECEIVE_BLOCKING) {
				rcvTimeout = -1;
			} else {
				rcvTimeout = ((int) receiveTimeout) / 1000;
			}
			rcvTimeout = getIntProperty("receive-timeout", rcvTimeout);
			if (rcvTimeout == -1) {
				receiveTimeout = Data.RECEIVE_BLOCKING;
			} else {
				receiveTimeout = rcvTimeout * 1000;
			}

			syncMode = properties.getProperty("sync-mode", (asynchronous ? "async" : "sync"));
			if (syncMode.equalsIgnoreCase("sync")) {
				asynchronous = false;
			} else if (syncMode.equalsIgnoreCase("async")) {
				asynchronous = true;
			} else {
				asynchronous = false;
			}

			shortMessage = properties.getProperty("the-short-message", shortMessage);
			dataCoding = getByteProperty("data-encoding", dataCoding);
			callBackUrl = properties.getProperty("callback-url", callBackUrl);
			callBackNumStr = properties.getProperty("callback-number", callBackNumStr);

			registeredDelivery = getByteProperty("registeredDelivery", registeredDelivery);

			Date f_Date = new Date();
			DateFormat f_DateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
			psSeq = "Ps-Seq-" + f_DateFormat.format(f_Date);

			logger.info("psSeq=" + psSeq);

		} catch (FileNotFoundException localFileNotFoundException) {
			localFileNotFoundException.printStackTrace();
		} catch (IOException localIOException) {
			localIOException.printStackTrace();
		}
	}

	private void bind() {
		logger.info("SMPPTest.bind()");
		try {

			if (bound) {
				logger.info("Already bound, unbind first.");
				return;
			}

			BindRequest request = null;
			BindResponse response = null;
			// String syncMode = (asynchronous ? "a" : "s");

			// type of the session
			// syncMode = getParam("Asynchronous/Synchronnous Session? (a/s)", syncMode);
			/*
			 * if (syncMode.compareToIgnoreCase("a") == 0) { asynchronous = true; } else if
			 * (syncMode.compareToIgnoreCase("s") == 0) { asynchronous = false; } else {
			 * log("Invalid mode async/sync, expected a or s, got " + syncMode +
			 * ". Operation canceled."); return; }
			 */
			// input values
			// bindOption = getParam("Transmitter/Receiver/Transciever (t/r/tr)",
			// bindOption);

			if (bindOption.compareToIgnoreCase("t") == 0) {
				request = new BindTransmitter();
			} else if (bindOption.compareToIgnoreCase("r") == 0) {
				request = new BindReceiver();
			} else if (bindOption.compareToIgnoreCase("tr") == 0) {
				request = new BindTransciever();
			} else {
				logger.info("Invalid bind mode, expected t, r or tr, got " + bindOption + ". Operation canceled.");
				return;
			}

			// ipAddress = getParam("IP address of SMSC", ipAddress);
			// port = getParam("Port number", port);

			TCPIPConnection connection = new TCPIPConnection(ipAddress, port);
			connection.setReceiveTimeout(20 * 1000);
			session = new Session(connection);

			// systemId = getParam("Your system ID", systemId);
			// password = getParam("Your password", password);

			// set values
			request.setSystemId(systemId);
			request.setPassword(password);
			request.setSystemType(systemType);
			request.setInterfaceVersion((byte) 0x34);
			request.setAddressRange(addressRange);

			// send the request
			logger.info("Bind request " + request.debugString());
			if (asynchronous) {
				pduListener = new SMPPTestPDUEventListener(session, psSeq);
				response = session.bind(request, pduListener);
			} else {
				response = session.bind(request);
			}
			logger.info("Bind response " + response.debugString());
			if (response.getCommandStatus() == Data.ESME_ROK) {
				bound = true;
			}

		} catch (Exception e) {
			// event.write(e, "");
			// debug.write("Bind operation failed. " + e);
			logger.info("Bind operation failed. " + e);
		} finally {
			// debug.exit(this);
			logger.info("exit bind");
		}
	}

	private void unbind() {
		logger.info("SMPPTest.unbind()");
		try {

			if (!bound) {
				logger.info("Not bound, cannot unbind.");
				return;
			}

			// send the request
			logger.info("Going to unbind.");
			if (session.getReceiver().isReceiver()) {
				logger.info("It can take a while to stop the receiver.");
			}
			UnbindResp response = session.unbind();
			logger.info("Unbind response " + response.debugString());
			bound = false;

		} catch (Exception e) {
			// event.write(e, "");
			// debug.write("Unbind operation failed. " + e);
			logger.info("Unbind operation failed. " + e);
		} finally {
			// debug.exit(this);
			logger.info("exit unbind");
		}
	}

	private void submit(String sms_seq, String AA, String BB, String msg) {
		// debug.enter(this, "SMPPTest.submit()");
		logger.info("SMPPTest.submit()");
		t_msgcount++;
		try {
			SubmitSM request = new SubmitSM();
			SubmitSMResp response;

			// address.setAddress(addr);
			sourceAddress.setAddress("20100001886" + AA.substring(1));
			destAddress.setAddress(BB);
			shortMessage = msg;
			// input values
			/*
			 * serviceType = getParam("Service type", serviceType); sourceAddress =
			 * getAddress("Source", sourceAddress); destAddress = getAddress("Destination",
			 * destAddress); replaceIfPresentFlag = getParam("Replace if present flag",
			 * replaceIfPresentFlag); shortMessage = getParam("The short message",
			 * shortMessage); callBackUrl = getParam("Callback URL", callBackUrl);
			 * callBackNumStr = getParam("Callback number", callBackNumStr);
			 * scheduleDeliveryTime =
			 * getParam("Schedule delivery time[ex:030716092500000R]",
			 * scheduleDeliveryTime); validityPeriod =
			 * getParam("Validity period[ex:030716092500000R]", validityPeriod); esmClass =
			 * getParam("Esm class", esmClass); protocolId = getParam("Protocol id",
			 * protocolId); priorityFlag = getParam("Priority flag", priorityFlag);
			 * registeredDelivery = getParam("Registered delivery", registeredDelivery);
			 * dataCoding = getParam("Data encoding", dataCoding); smDefaultMsgId =
			 * getParam("Sm default msg id", smDefaultMsgId);
			 */
			// ***********************************************************************
			if (callBackUrl.length() > 7) {
				serviceType = "WPUSH"; // WPUSH,JAVAD
				shortMessage = callBackUrl + (char) 0x0B + shortMessage;
			}

			if (callBackNumStr.length() > 0) {
				if (callBackNumStr.substring(0, 2).equals("09"))
					callBackNumStr = "886" + callBackNumStr.substring(1);
				if (callBackNumStr.length() > 0)
					callBackNumber.appendString("100" + callBackNumStr);
			}

			// set values
			// set callback number values
			if (callBackNumStr.length() > 0)
				request.setCallbackNum(callBackNumber);
			request.setServiceType(serviceType);
			request.setSourceAddr(sourceAddress);
			request.setDestAddr(destAddress);
			request.setReplaceIfPresentFlag(replaceIfPresentFlag);
			if (dataCoding == 8)
				request.setShortMessage(shortMessage, chineseCharacter);
			else
				request.setShortMessage(shortMessage);
			request.setScheduleDeliveryTime(scheduleDeliveryTime);
			request.setValidityPeriod(validityPeriod);
			request.setEsmClass(esmClass);
			request.setProtocolId(protocolId);
			request.setPriorityFlag(priorityFlag);
			request.setRegisteredDelivery(registeredDelivery);
			request.setDataCoding(dataCoding);
			request.setSmDefaultMsgId(smDefaultMsgId);

			// send the request

			int count = 1;
			//System.out.println();
			// count = getParam("How many times to submit this message (load test)", count);
			for (int i = 0; i < count; i++) {
				// request.assignSequenceNumber(true);
				request.setSequenceNumber(Integer.parseInt(sms_seq));
				// log("#" + i + " ");
				logger.info("Submit request " + request.debugString());
				logger.info("t_msgcount=" + t_msgcount + "," + "r_msgcount=" + r_msgcount + "submit psSeq=" + psSeq
						+ "seq=" + Integer.toString(request.getSequenceNumber()));

				if (asynchronous) {
					session.submit(request);
					// System.out.println();
				} else {
					response = session.submit(request);
					logger.info("Submit response " + response.debugString());
					messageId = response.getMessageId();
					logger.info("messageId=" + messageId);
				}
			}

		} catch (Exception e) {
			// event.write(e, "");
			// debug.write("Submit operation failed. " + e);
			logger.error("Submit operation failed. " + e);
		} finally {
			// debug.exit(this);
			logger.info("exit submit");
		}
	}

	private class SMPPTestPDUEventListener extends SmppObject implements ServerPDUEventListener {
		Session session;
		Queue requestEvents = new Queue();
		String listen_psseq = "";

		public SMPPTestPDUEventListener(Session session, String lsn_psseq) {
			this.session = session;
			this.listen_psseq = lsn_psseq;
		}

		public void handleEvent(ServerPDUEvent event) {
			PDU pdu = event.getPDU();
			if (pdu.isRequest()) {
				logger.info("async request received, enqueuing " + pdu.debugString());
				synchronized (requestEvents) {
					requestEvents.enqueue(event);
					requestEvents.notify();
				}
			} else if (pdu.isResponse()) {
				r_msgcount++;
				logger.info("t_msgcount=" + t_msgcount + "," + "r_msgcount=" + r_msgcount + ",listen_psseq="
						+ listen_psseq + "seq=" + Integer.toString(pdu.getSequenceNumber()));
				logger.info("async response received " + pdu.debugString());
				// if (t_msgcount == r_msgcount)
				// unbind();
			} else {
				logger.info("pdu of unknown class (not request nor " + "response) received, discarding "
						+ pdu.debugString());
			}
		}

	}

}
